name: Build Custom PostgreSQL debian amd64 Bundle

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

env:
  PG_VERSION: '16.4'
  ARCH: 'amd64'

jobs:
  build:
    name: Build PG Bundle with Gradle + Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set PG_FILE
        run: echo "PG_FILE=postgresql-${PG_VERSION}-linux-debian-${ARCH}.txz" >> $GITHUB_ENV

      - name: Set up Java for Gradle
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Give gradlew execution permissions
        run: chmod +x ./gradlew

      - name: Run Gradle with parameters
        run: |
          ./gradlew clean install \
            -Pversion=${{ env.PG_VERSION }}.0 \
            -PpgVersion=${{ env.PG_VERSION }} \
            -ParchName=${{ env.ARCH }} \
            -PGVECTOR_VERSION=0.8.0

      - name: Move output bundle to workspace root
        run: |
          find . -name "postgres-linux-debian.txz" -exec cp {} "./${{ env.PG_FILE }}" \;

      - name: Ensure artifact exists
        run: test -f "${{ env.PG_FILE }}"

      - name: Calculate SHA256 Checksums
        id: calculate_sha256
        run: |
          echo "SHA256SUMS=$(shasum -a 256 ${{ env.PG_FILE }} | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Get date
        id: get_date
        run: |
          echo "DATE=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Create and push tag if it doesn't exist
        run: |
          tag="v${{ env.PG_VERSION }}-linux-debian-${{ env.ARCH }}-${{ steps.get_date.outputs.DATE }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch --tags
          if ! git rev-parse "$tag" >/dev/null 2>&1; then
            git tag "$tag"
            git push origin "$tag"
          else
            echo "Tag $tag already exists, skipping creation."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Existing Release
        if: always()
        run: |
          tag="v${{ env.PG_VERSION }}-linux-debian-${{ env.ARCH }}-${{ steps.get_date.outputs.DATE }}"
          release_id=$(gh release view "$tag" --json id -q '.id' 2>/dev/null || echo "")
          if [[ -n "$release_id" ]]; then
            gh release delete "$tag" -y
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: "v${{ env.PG_VERSION }}-linux-debian-${{ env.ARCH }}-${{ steps.get_date.outputs.DATE }}"
          release_name: "${{ env.PG_VERSION }}-linux-debian-${{ env.ARCH }}-${{ steps.get_date.outputs.DATE }}"
          draft: false
          prerelease: false
          body: |
            SHA256 Checksums:
            ```
            ${{ steps.calculate_sha256.outputs.SHA256SUMS }}
            ```

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PG_FILE }}
          asset_name: ${{ env.PG_FILE }}
          asset_content_type: application/x-tar

#      - name: Upload postgres bundle
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.PG_FILE }}
#          path: ${{ env.PG_FILE }}
#
#      - name: Upload release asset
#        uses: softprops/action-gh-release@v1
#        if: startsWith(github.ref, 'refs/tags/')
#        with:
#          files: ${{ env.PG_FILE }}